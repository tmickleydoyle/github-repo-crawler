name: Code Quality Checks

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          echo "üîç Running flake8 linting..."
          python -m flake8 crawler/ tests/ --count --statistics

      - name: Type check with mypy
        run: |
          echo "üîç Running mypy type checking..."
          python -m mypy crawler/ tests/ --ignore-missing-imports

      - name: Check code formatting with black
        run: |
          echo "üîç Checking code formatting..."
          python -m black --check crawler/ tests/ --line-length 88

      - name: Validate imports and configuration
        run: |
          echo "üîç Validating module imports..."
          export GITHUB_TOKEN="dummy_token_for_validation"
          python -c "
          import sys
          sys.path.append('.')

          # Test core module imports
          try:
              from crawler import client, main, config, domain, search_strategy
              print('‚úÖ All core modules import successfully')
          except Exception as e:
              print(f'‚ùå Import error: {e}')
              sys.exit(1)
              
          # Test configuration loading
          try:
              from crawler.config import settings
              print('‚úÖ Configuration loads successfully')
          except Exception as e:
              print(f'‚ùå Config error: {e}')
              sys.exit(1)
          "

      - name: Run tests
        run: |
          echo "üîç Running test suite..."
          python -m pytest tests/ -v --tb=short

      - name: Generate coverage report
        run: |
          echo "üîç Generating coverage report..."
          python -m pytest tests/ --cov=crawler --cov-report=xml --cov-report=term-missing

      - name: Upload coverage reports to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
